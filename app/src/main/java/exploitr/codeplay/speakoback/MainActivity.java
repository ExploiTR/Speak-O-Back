package exploitr.codeplay.speakoback;


import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.Locale;

public class MainActivity extends AppCompatActivity implements TextToSpeech.OnInitListener {

    EditText reversible;
    TextView reversedView;
    ImageView speak;
    ImageView settings;
    StringBuilder reverserInCode;
    String theReversed;
    TextToSpeech textToSpeech;
    SharedPreferences preferences;
    float speedx;
    float pitchx;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        reversible = (EditText) findViewById(R.id.enterText);
        reversedView = (TextView) findViewById(R.id.viewRevText);
        speak = (ImageView) findViewById(R.id.speaker);
        settings = (ImageView) findViewById(R.id.settings);

        preferences = this.getSharedPreferences("all", MODE_PRIVATE);

        textToSpeech = new TextToSpeech(this, this);

        theReversed = ""; //If somewhere it causes null-po-ex


        reversible.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                reverserInCode = new StringBuilder();
                reverserInCode.append(s.toString());
                reversedView.setText(theReversed = reverserInCode.reverse().toString());
            }
        });

        speak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                say();
            }
        });

        settings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                LayoutInflater inflater = MainActivity.this.getLayoutInflater();
                View dialogView = inflater.inflate(R.layout.settings, null);

                AlertDialog.Builder alert = new AlertDialog.Builder(MainActivity.this);

                alert.setTitle("Settings");
                alert.setView(dialogView);

                final EditText speed = (EditText) dialogView.findViewById(R.id.speed);
                final EditText pitch = (EditText) dialogView.findViewById(R.id.pitch);

                speed.setText(String.valueOf(preferences.getFloat("speed",0f)));
                pitch.setText(String.valueOf(preferences.getFloat("pitch",0f)));

                alert.setPositiveButton("Done", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        boolean x = false, y = false;
                        try {
                            speedx = Float.parseFloat(speed.getText().toString() + "f");
                            if (speedx > 19f) speedx = 19f;
                            preferences.edit().putFloat("speed", speedx).apply();
                            textToSpeech.setSpeechRate(speedx);
                        } catch (Exception e) {
                            e.printStackTrace();
                            e.getSuppressed();
                            x = true;
                        }

                        try {
                            pitchx = Float.parseFloat(pitch.getText().toString() + "f");
                            if (pitchx > 19f) pitchx = 19f;
                            preferences.edit().putFloat("pitch", pitchx).apply();
                            textToSpeech.setPitch(pitchx);
                        } catch (Exception e) {
                            e.printStackTrace();
                            e.getSuppressed();
                            y = true;
                        }

                        if (x | y) {
                            if (x)
                                Snackbar.make(getWindow().getDecorView(), "Invalid Value For Speed", Snackbar.LENGTH_SHORT).show();
                            if (y)
                                Snackbar.make(getWindow().getDecorView(), "Invalid Value For Pitch", Snackbar.LENGTH_SHORT).show();
                        } else if (x && y)
                            Snackbar.make(getWindow().getDecorView(), "Invalid Value For Speed and Pitch", Snackbar.LENGTH_SHORT).show();

                    }
                }).setNegativeButton("Close", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                }).show();
            }
        });

    }


    @Override
    public void onDestroy() {
        if (textToSpeech != null) {
            textToSpeech.stop();
            textToSpeech.shutdown();
        }
        super.onDestroy();
    }

    @Override
    public void onInit(int status) {

        if (status == TextToSpeech.SUCCESS) {

            int result = textToSpeech.setLanguage(Locale.US);

            if (result == TextToSpeech.LANG_MISSING_DATA) {
                Intent installIntent = new Intent();
                installIntent.setAction(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);
                startActivity(installIntent);
            } else if (result == TextToSpeech.LANG_NOT_SUPPORTED) {
                new AlertDialog.Builder(this)
                        .setTitle("Error")
                        .setMessage("Speak-O-Out currently uses US English. Which isn't supported on your device. ")
                        .setCancelable(false)
                        .setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                    finishAndRemoveTask();
                                } else finish();
                            }
                        }).show();
            } else {
                //Success
                textToSpeech.setSpeechRate(preferences.getFloat("speed", 0f));
                textToSpeech.setPitch(preferences.getFloat("pitch", 0f));
            }

        } else {
            new AlertDialog.Builder(this)
                    .setTitle("Error")
                    .setMessage("Looks like Text-To-Speech isn't installed. Do you want to install it now?")
                    .setCancelable(false)
                    .setNegativeButton("Exit", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                finishAndRemoveTask();
                            } else finish();
                        }
                    })
                    .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=com.google.android.tts")));
                        }
                    }).show();
        }

    }

    private void say() {
        if (!textToSpeech.isSpeaking() && !theReversed.isEmpty()) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                textToSpeech.speak(theReversed, TextToSpeech.QUEUE_FLUSH, null, null);
            } else {
                textToSpeech.speak(theReversed, TextToSpeech.QUEUE_FLUSH, null);
            }
        } else if (!theReversed.isEmpty()) {
            Snackbar.make(getWindow().getDecorView(), "Wait friend! I'm busy speaking", Snackbar.LENGTH_SHORT).show();
        } else {
            Snackbar.make(getWindow().getDecorView(), "Oops! No input there. ¯\\_(ツ)_/¯", Snackbar.LENGTH_SHORT).show();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = this.getMenuInflater();
        inflater.inflate(R.menu.main_menu,menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if(item.getItemId()==R.id.action_about){
            new AlertDialog.Builder(this)
                    .setTitle("About")
                    .setMessage("Speak-O-back is a funny application which will made you laugh by reading aloud any word in reverse you put.\n" +
                            "\n" +
                            "Speak-O-back is copyright of Pratim Majumder aka exploitr.\n" +
                            "\n" +
                            "License:\n" +
                            "\n" +
                            "   Copyright 2017 Pratim Majumder\n" +
                            "\n" +
                            "   Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
                            "   you may not use this file except in compliance with the License.\n" +
                            "   You may obtain a copy of the License at\n" +
                            "\n" +
                            "       http://www.apache.org/licenses/LICENSE-2.0\n" +
                            "\n" +
                            "   Unless required by applicable law or agreed to in writing, software\n" +
                            "   distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
                            "   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
                            "   See the License for the specific language governing permissions and\n" +
                            "   limitations under the License.")
                    .setPositiveButton("Okay",null).show();
        }
        return super.onOptionsItemSelected(item);
    }
}

